module Cattri
  # Cattri::Context encapsulates the class or module that attributes are being defined on.
  #
  # It provides a safe interface for dynamically defining methods and tracking metadata,
  # such as declared accessors, access visibility, and deferred attribute declarations.
  #
  # It handles:
  # - Attribute method definitions (reader/writer/predicate)
  # - Visibility enforcement
  # - Target resolution (instance vs. class-level)
  # - Method deduplication and tracking
  #
  # All method definitions occur directly on the resolved target (e.g., the class or its singleton).
  class Context
    @target: ::Module

    @__cattri_defined_methods: ::Hash[::Symbol, ::Set[::Symbol]]

    # The class or module that owns the attributes.
    #
    # @return [Module]
    attr_reader target: ::Module

    # @param target [Module, Class]
    def initialize: (::Module target) -> void

    # Returns a frozen copy of all attribute methods explicitly defined by this context.
    #
    # This does not include inherited or module-defined methods.
    #
    # @return [Hash{Symbol => Set<Symbol>}] map of attribute name to defined method names
    def defined_methods: () -> ::Hash[::Symbol, ::Set[::Symbol]]

    # Whether this target should defer method definitions (e.g., if it's a module).
    #
    # @return [Boolean]
    def defer_definitions?: () -> bool

    # Ensures the target includes Cattri::DeferredAttributes if needed.
    #
    # Used to prepare modules for later application of attributes when included elsewhere.
    #
    # @return [void]
    def ensure_deferred_support!: () -> void

    # All ancestors and included modules used for attribute lookup and inheritance.
    #
    # @return [Array<Module>]
    def attribute_lookup_sources: () -> ::Array[::Module]

    # Defines a method for the given attribute unless already defined locally.
    #
    # Respects attribute-level force overwrite and enforces visibility rules.
    #
    # @param attribute [Cattri::Attribute]
    # @param name [Symbol, nil] optional method name override
    # @yield method implementation block
    # @raise [Cattri::AttributeError] if method is already defined and not forced
    # @return [void]
    def define_method: (Attribute attribute, ?name: identifier?) { (?) -> untyped } -> void

    # Checks if the given method is already defined on the resolved target.
    #
    # Only checks methods directly defined on the class or singletonâ€”not ancestors.
    #
    # @param attribute [Cattri::Attribute]
    # @param name [Symbol, nil]
    # @return [Boolean]
    def method_defined?: (Attribute attribute, ?name: identifier?) -> bool

    # Determines whether to define the method on the instance or singleton.
    #
    # @param attribute [Cattri::Attribute]
    # @return [Module]
    def target_for: (Attribute attribute) -> ::Module

    # Determines the object (class/module or runtime instance) that should hold
    # the backing storage for the given attribute.
    #
    # - For class-level attributes, uses the singleton class of `defined_in` or the module itself
    # - For instance-level attributes, uses the provided instance
    #
    # @param attribute [Cattri::Attribute]
    # @param instance [Object, nil] the runtime instance, if needed for instance-level access
    # @return [Object] the receiver for attribute value storage
    # @raise [Cattri::Error] if instance is required but missing
    def storage_receiver_for: (Attribute attribute, ::Object? instance) -> ::Object

    private

    # Internal tracking of explicitly defined methods per attribute.
    #
    # @return [Hash{Symbol => Set<Symbol>}]
    def __cattri_defined_methods: () -> ::Hash[::Symbol, ::Set[::Symbol]]

    # Determines whether the object is a singleton_class or not.
    #
    # @param obj [Object]
    # @return [Boolean]
    def singleton_class?: (untyped obj) -> bool

    # Resolves the proper class-level storage receiver for the attribute.
    #
    # @param attribute [Cattri::Attribute]
    # @param instance [Object, nil]
    # @return [Object]
    def resolve_class_storage_for: (Attribute attribute, ::Object? instance) -> ::Object

    # Installs the internal store on the receiver if not present.
    #
    # @param receiver [Object]
    # @return [void]
    def install_internal_store!: (::Object receiver) -> void

    # Defines the method and applies its access visibility.
    #
    # @param target [Module]
    # @param attribute [Cattri::Attribute]
    # @param name [Symbol]
    # @yield method implementation
    # @return [void]
    def define_method!: (::Module target, Attribute attribute, ::Symbol name) { (?) -> untyped } -> void

    # Applies visibility (`public`, `protected`, `private`) to a method.
    #
    # Skips application for `:public` (default in Ruby).
    #
    # @param target [Module]
    # @param name [Symbol]
    # @param attribute [Cattri::Attribute]
    # @return [void]
    def apply_visibility!: (::Module target, ::Symbol name, Attribute attribute) -> void

    # Determines the effective visibility of the attribute.
    #
    # - If the attribute has no public writer or reader (i.e., `expose: :write` or `:none`)
    #   - Returns `:protected` for class-level attributes
    #   - Returns `:private` for instance-level attributes
    # - Otherwise, returns the explicitly declared visibility (`attribute.visibility`)
    #
    # This ensures that internal-only attributes remain inaccessible outside their scope,
    # while still being usable by subclasses if class-level.
    #
    # @param attribute [Cattri::Attribute]
    # @return [Symbol]
    def effective_visibility: (Attribute attribute, ::Symbol name) -> visibility_types

    # Determines whether the given method name (accessor or writer)
    # should be treated as internal-only based on the attribute's `expose` configuration.
    #
    # This is used when resolving method visibility (e.g., private vs protected).
    #
    # - Writer methods (`:attr=`) are considered internal if the attribute lacks public read access.
    # - Reader methods (`:attr`) are considered internal if the attribute lacks public write access.
    #
    # @param attribute [Cattri::Attribute] the attribute definition
    # @param name [Symbol, String] the method name being defined
    # @return [Boolean] true if the method should be scoped for internal use only
    def internal_method?: (Attribute attribute, Symbol name) -> bool
  end
end
